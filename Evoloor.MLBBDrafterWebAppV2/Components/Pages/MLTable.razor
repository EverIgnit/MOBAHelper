@page "/"
@using System.Collections.Generic
@using System.Linq
@using MudBlazor
@if (heroes is not null)
{
    <MudTable Items="@heroes"
              Hover=true
              FixedHeader=true
              Height="70vh"
              HorizontalScrollbar=true
              CanCancelEdit=true
              Dense=true
              EditTrigger="TableEditTrigger.EditButton"
              EditButtonPosition="TableEditButtonPosition.StartAndEnd"
              Filter="new Func<HeroStableGraded,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Всего @heroes.Count героев</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object>(x=>x.Name)">Герой</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.Traits?.Count())">Черты</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.TurretDamage)"></MudTableSortLabel>Build</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.TurretDamage)">Пушер</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.LaneClear)">Крип-Деф</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.CCAmount)">Контроль</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.ReachingFarEvaluation)">Далеко ли дотянется</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.UniqueAbilityPoints)">Остальное</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.MetaPoints)">Мета поинтов</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.DominatesStage)">Стадия игры</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.DamageAmount)">Урон</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.DamageAmount)">Распределение урона</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.DamageBlockable)">Контрится бронёй</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object?>(x=>x.Attributes?.CCType)">Тип контроля</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<HeroStableGraded, object>(x=>x.Name)">Герой</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            @if (context is not null)
            {
                <MudTd>@context.Name</MudTd>
                @if (context.Attributes is not null)
                {
                <MudTd>
                    <MudChipSet T="HeroTrait" Color="Color.Primary" ReadOnly=true>
                        @foreach (var trait in context.Attributes.Traits)
                        {
                            <MudChip Value="trait">@trait</MudChip>
                        }
                    </MudChipSet>
                </MudTd>
                <MudTd>
                    @* <MudSelect T="Build" @bind-Value="context.Build">
                            @foreach (var build in Enum.GetValues(typeof(Build)).Cast<Build>())
                            {
                                <MudSelectItem Value="build">@build</MudSelectItem>
                            }
                        </MudSelect> *@
                </MudTd>
                    <MudTd>@context.Attributes.TurretDamage</MudTd>
                    <MudTd>@context.Attributes.LaneClear</MudTd>
                    <MudTd>@context.Attributes.CCAmount</MudTd>
                    <MudTd>@context.Attributes.ReachingFarEvaluation</MudTd>
                    <MudTd>@context.Attributes.UniqueAbilityPoints</MudTd>
                    <MudTd>@context.Attributes.MetaPoints</MudTd>
                    <MudTd>@context.Attributes.DominatesStage</MudTd>
                    @if (context.Attributes.DamageAmount is DamageAmount da)
                    {
                        @if (damageAmountDisplayNames?.TryGetValue(da,out string? damageAmountDisplayText) is true)
                        {
                            <MudTd>@damageAmountDisplayText</MudTd>
                        }
                    }
                    else
                    {
                        <MudTd></MudTd>
                    }
                    <MudTd>@context.Attributes.DamageTarget</MudTd>
                    <MudTd>@context.Attributes.DamageBlockable</MudTd>
                    <MudTd>@context.Attributes.CCType</MudTd>
                }
                else
                {
                    @for (var i = 0; i < 13; i++)
                    {
                        <MudTd></MudTd>
                    }
                }
                <MudTd>@context.Name</MudTd>
            }
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd>@context.Name</MudTd>
            @if (context.Attributes is not null)
            {
                <MudTd>
                    <MudSelect T="HeroTrait" FullWidth=true MultiSelection=true @bind-SelectedValues="context.Attributes.Traits">
                        @foreach (var trait in Enum.GetValues(typeof(HeroTrait)).Cast<HeroTrait>())
                        {
                            <MudSelectItem Value="trait">@trait.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd></MudTd>
                <MudTd><MudNumericField Min=0 Max=3 T="int?" @bind-Value="context.Attributes.TurretDamage" /></MudTd>
                <MudTd><MudNumericField Min=0 Max=3 T="int?" @bind-Value="context.Attributes.LaneClear" /></MudTd>
                <MudTd><MudNumericField Min=0 Max=3 T="int?" @bind-Value="context.Attributes.CCAmount" /></MudTd>
                <MudTd><MudNumericField Min=0 Max=3 T="int?" @bind-Value="context.Attributes.ReachingFarEvaluation" /></MudTd>
                <MudTd><MudNumericField Min=0 Max=3 T="int?" @bind-Value="context.Attributes.UniqueAbilityPoints" /></MudTd>
                <MudTd><MudNumericField Min=0 Max=3 T="int?" @bind-Value="context.Attributes.MetaPoints" /></MudTd>
                <MudTd>
                    <MudSelect FullWidth=true T="GameStage?" @bind-Value="context.Attributes.DominatesStage">
                        @foreach (var option in Enum.GetValues(typeof(GameStage)).Cast<GameStage?>())
                        {
                            <MudSelectItem Value="option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="DamageAmount?" @bind-Value="context.Attributes.DamageAmount">
                        @foreach (var option in Enum.GetValues(typeof(DamageAmount)).Cast<DamageAmount?>())
                        {
                            <MudSelectItem Value="option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="DamageTarget?" @bind-Value="context.Attributes.DamageTarget">
                        @foreach (var option in Enum.GetValues(typeof(DamageTarget)).Cast<DamageTarget?>())
                        {
                            <MudSelectItem Value="option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="DamageBlockable?" @bind-Value="context.Attributes.DamageBlockable">
                        @foreach (var option in Enum.GetValues(typeof(DamageBlockable)).Cast<DamageBlockable?>())
                        {
                            <MudSelectItem Value="option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="CCType?" @bind-Value="context.Attributes.CCType">
                        @foreach (var option in Enum.GetValues(typeof(CCType)).Cast<CCType?>())
                        {
                            <MudSelectItem Value="option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
            }
            <MudTd>@context.Name</MudTd>
        </RowEditingTemplate>
    </MudTable>
}
@code {
    string searchString = "";
    List<HeroStableGraded> heroes = Heroes.AllHeroes.ToList();
    Dictionary<DamageAmount, string> damageAmountDisplayNames = new()
    {
        {DamageAmount.Carry_25_40, "Керри (25-40%)"},
        {DamageAmount.High_18_24, "Высокий (18-24%)"},
        {DamageAmount.Normal_11_17, "Норм (11-17%)"},
        {DamageAmount.Low_10, "Мало (<10%)"},
    };
    bool FilterFunc(HeroStableGraded hero)
    {
        return hero.Name.ToLower().Contains(searchString.ToLower());
    }
}
